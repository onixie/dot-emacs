--- flim-1.14.9.orig/eword-decode.el
+++ flim-1.14.9/eword-decode.el
@@ -87,7 +87,10 @@
 
 If MUST-UNFOLD is non-nil, it unfolds and eliminates line-breaks even
 if there are in decoded encoded-words (generated by bad manner MUA
-such as a version of Net$cape)."
+such as a version of Net$cape).
+
+The language informations specified in the encoded words, if any, are
+put to the decoded text as the `mime-language' text property."
   (setq string (std11-unfold-string string))
   (let ((regexp (concat "[\n\t ]*\\(" eword-encoded-word-regexp "\\)"))
 	(next 0)
@@ -98,7 +101,11 @@
       (while match
 	(setq next (match-end 0))
 	(push (list (match-string 2 string) ;; charset
-		    (match-string 3 string) ;; language
+		    (when (match-beginning 3) ;; language
+		      (intern
+		       (downcase
+			(substring string
+				   (1+ (match-beginning 3)) (match-end 3)))))
 		    (match-string 4 string) ;; encoding
 		    (match-string 5 string) ;; encoded-text
 		    (match-string 1 string)) ;; encoded-word
@@ -216,7 +223,10 @@
 
 If MUST-UNFOLD is non-nil, it unfolds and eliminates line-breaks even
 if there are in decoded encoded-words (generated by bad manner MUA
-such as a version of Net$cape)."
+such as a version of Net$cape).
+
+The language informations specified in the encoded words, if any, are
+put to the decoded text as the `mime-language' text property."
   (interactive "*r")
   (save-excursion
     (save-restriction
@@ -232,7 +242,11 @@
 	  (while match
 	    (goto-char (setq end (match-end 0)))
 	    (push (list (match-string 2) ;; charset
-			(match-string 3) ;; language
+			(when (match-beginning 3) ;; language
+			  (intern
+			   (downcase
+			    (buffer-substring (1+ (match-beginning 3))
+					      (match-end 3)))))
 			(match-string 4) ;; encoding
 			(match-string 5) ;; encoded-text
 			(match-string 1)) ;; encoded-word
@@ -713,7 +727,11 @@
     (while match
       (setq next (match-end 0))
       (push (list (match-string 2 string) ;; charset
-		  (match-string 3 string) ;; language
+		  (when (match-beginning 3) ;; language
+		    (intern
+		     (downcase
+		      (substring string
+				 (1+ (match-beginning 3)) (match-end 3)))))
 		  (match-string 4 string) ;; encoding
 		  (match-string 5 string) ;; encoded-text
 		  (match-string 1 string)) ;; encoded-word
--- flim-1.14.9.orig/mel-q-ccl.el
+++ flim-1.14.9/mel-q-ccl.el
@@ -67,7 +67,7 @@
       0   1   2   3   4   5   6   7   8   9 nil nil nil nil nil nil
     nil  10  11  12  13  14  15 nil nil nil nil nil nil nil nil nil
     nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
-    nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
+    nil  10  11  12  13  14  15 nil nil nil nil nil nil nil nil nil
     nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
     nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
     nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
--- flim-1.14.9.orig/tests/test-rfc2231.el
+++ flim-1.14.9/tests/test-rfc2231.el
@@ -151,13 +151,13 @@
 (luna-define-method test-rfc2231-encoded-word-1 ((case test-rfc2231))
   (lunit-assert
    (string=
-    (eword-decode-encoded-word "=?US-ASCII?Q?Keith_Moore?=")
+    (eword-decode-string "=?US-ASCII?Q?Keith_Moore?=")
     "Keith Moore")))
 
 (luna-define-method test-rfc2231-encoded-word-2 ((case test-rfc2231))
   (lunit-assert
    (string=
-    (eword-decode-encoded-word "=?US-ASCII*EN?Q?Keith_Moore?=")
+    (eword-decode-string "=?US-ASCII*EN?Q?Keith_Moore?=")
     "Keith Moore")))
 
 (luna-define-method test-rfc2231-encoded-word-3 ((case test-rfc2231))
@@ -165,7 +165,7 @@
    (eq
     (get-text-property
      0 'mime-language
-     (eword-decode-encoded-word "=?US-ASCII*EN?Q?Keith_Moore?="))
+     (eword-decode-string "=?US-ASCII*EN?Q?Keith_Moore?="))
     'en)))
 
 ;;;
